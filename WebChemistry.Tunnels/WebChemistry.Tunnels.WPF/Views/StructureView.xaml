<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:TunnelControls="clr-namespace:WebChemistry.Tunnels.WPF.Controls"
             xmlns:local="clr-namespace:WebChemistry.Tunnels.WPF"
             xmlns:v="clr-namespace:WebChemistry.Tunnels.WPF.Views"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             x:Class="WebChemistry.Tunnels.WPF.Views.StructureView"
             mc:Ignorable="d"
             d:DesignWidth="800" d:DesignHeight="400">
    <Grid MouseWheel="Grid_MouseWheel">
    	<Grid.Resources>
    		  <local:EnumToBoolConverter x:Key="EnumToBool"	 />
		</Grid.Resources>
    	<i:Interaction.Triggers>
    		<i:EventTrigger>
    			<ei:GoToStateAction StateName="Black"/>
    		</i:EventTrigger>
    	</i:Interaction.Triggers>
    	<VisualStateManager.VisualStateGroups>
    		<VisualStateGroup x:Name="ToolStates">
    			<VisualState x:Name="VisibleTools"/>
    			<VisualState x:Name="HiddenTools">
    				<Storyboard>
    					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="grid">
    						<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
    					</ObjectAnimationUsingKeyFrames>
    					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="button">
    						<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
    					</ObjectAnimationUsingKeyFrames>
    					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="button1">
    						<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
    					</ObjectAnimationUsingKeyFrames>
    				</Storyboard>
    			</VisualState>
    		</VisualStateGroup>
    		<VisualStateGroup x:Name="Background">
    			<VisualState x:Name="White">
    				<Storyboard>
    					<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="LayoutRoot">
    						<EasingColorKeyFrame KeyTime="0" Value="White"/>
    					</ColorAnimationUsingKeyFrames>
    					<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="VisualControlsBorder">
    						<EasingColorKeyFrame KeyTime="0" Value="#BF000000"/>
    					</ColorAnimationUsingKeyFrames>
    				</Storyboard>
    			</VisualState>
    			<VisualState x:Name="Black">
    				<Storyboard>
    					<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="LayoutRoot">
    						<EasingColorKeyFrame KeyTime="0" Value="Black"/>
    					</ColorAnimationUsingKeyFrames>
    				</Storyboard>
    			</VisualState>
    			<VisualState x:Name="Gray">
    				<Storyboard>
    					<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="VisualControlsBorder">
    						<EasingColorKeyFrame KeyTime="0" Value="#FF626262"/>
    					</ColorAnimationUsingKeyFrames>
    				</Storyboard>
    			</VisualState>
    		</VisualStateGroup>
    		<VisualStateGroup x:Name="HelpStates">
    			<VisualState x:Name="HiddenHelp">
    				<Storyboard>
    					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="stackPanel">
    						<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
    					</ObjectAnimationUsingKeyFrames>
    				</Storyboard>
    			</VisualState>
    		</VisualStateGroup>
    	</VisualStateManager.VisualStateGroups>
    	<Grid x:Name="LayoutRoot" Background="#FF626262">
    		<Grid.ColumnDefinitions>
    			<ColumnDefinition />
    			<ColumnDefinition Width="Auto" />
    		</Grid.ColumnDefinitions>
            <!--<Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StatusBar Grid.Row="1" Grid.ColumnSpan="2" Background="#FF323232">
                <TextBlock>Message</TextBlock>
            </StatusBar>-->
            
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TunnelControls:TunnelViewport Grid.Row="0" Visuals="{Binding Visuals, Mode=OneWay}" />
                
    			<StackPanel x:Name="stackPanel" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="6 0 0 6">
    				<Button Content="Hide" Style="{DynamicResource HyperlinkButton}" FontSize="9.333" HorizontalAlignment="Left" Padding="0" Foreground="#FFA1A1A1" >
    					<i:Interaction.Triggers>
    						<i:EventTrigger EventName="Click">
    							<ei:GoToStateAction StateName="HiddenHelp"/>
    						</i:EventTrigger>
    					</i:Interaction.Triggers>
    				</Button>
    				<TextBlock Text="Left-click: Select" FontSize="9.333" Foreground="#FFA1A1A1" IsHitTestVisible="False"/>
    				<TextBlock Text="Left-mouse: Rotate" FontSize="9.333" Foreground="#FFA1A1A1" IsHitTestVisible="False"/>
    				<TextBlock Text="Right-mouse: Zoom" FontSize="9.333" Foreground="#FFA1A1A1" IsHitTestVisible="False" />
					<TextBlock Text="Hold Ctrl to pan or add exits." FontSize="9.333" Foreground="#FFA1A1A1" IsHitTestVisible="False"/>
					<TextBlock Text="Hold Alt to deselect tunnels." FontSize="9.333" Foreground="#FFA1A1A1" IsHitTestVisible="False"/>
    			</StackPanel>
				
    			<Border HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="22" x:Name="VisualControlsBorder" Background="Black" Opacity="0.25" />
    				<Grid>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Top">
    					<Menu Background="Transparent">
    						<MenuItem Header="Display">
    							<MenuItem Header="Cartoons" IsCheckable="True" 
    								IsChecked="{Binding DisplayType, ConverterParameter=Cartoon, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    								Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    								CommandParameter="Cartoon" />
    							<MenuItem Header="Backbone" IsCheckable="True" 
    								IsChecked="{Binding DisplayType, ConverterParameter=Backbone, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    								Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    								CommandParameter="Backbone" />
    							<MenuItem Header="Sticks" IsCheckable="True"
    								IsChecked="{Binding DisplayType, ConverterParameter=FullChain, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    								Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    								CommandParameter="FullChain" />
                                <!--MenuItem Header="VDW Spheres" IsCheckable="True"
    								IsChecked="{Binding DisplayType, ConverterParameter=VdwSpheres, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    								Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    								CommandParameter="VdwSpheres" /-->
    							<Separator />
                                <MenuItem Header="Solid Cavities" IsCheckable="True"
                                    ToolTip="Reduces the cavity transparency."
    								IsChecked="{Binding DisplaySolidCavities, Mode=OneWay}"
    								Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    								CommandParameter="SolidCavities" />
                                <Separator />
    							<MenuItem Header="Coloring">
    								<MenuItem Header="Background" IsCheckable="True" 
    									IsChecked="{Binding Coloring, ConverterParameter=Background, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Background" />
    								<MenuItem Header="Structure" IsCheckable="True" 
    									IsChecked="{Binding Coloring, ConverterParameter=Structure, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Structure"/>
    								<MenuItem Header="Atom" IsCheckable="True" 
    									IsChecked="{Binding Coloring, ConverterParameter=Atom, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Atom"/>
    								<MenuItem Header="Residue" IsCheckable="True" 
    									IsChecked="{Binding Coloring, ConverterParameter=Residue, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Residue"/>
    								<MenuItem Header="Chain" IsCheckable="True" 
    									IsChecked="{Binding Coloring, ConverterParameter=Chain, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Chain" />
    							</MenuItem>
    							<Separator />
    							<MenuItem Header="Background">
    								<MenuItem Header="White" >
    									<i:Interaction.Triggers>
    										<i:EventTrigger EventName="Click">
    											<ei:GoToStateAction StateName="White"/>
    										</i:EventTrigger>
    									</i:Interaction.Triggers>
    								</MenuItem>
    								<MenuItem Header="Gray" >
    									<i:Interaction.Triggers>
    										<i:EventTrigger EventName="Click">
    											<ei:GoToStateAction StateName="Gray"/>
    										</i:EventTrigger>
    									</i:Interaction.Triggers>
    								</MenuItem>
    								<MenuItem Header="Black" >
    									<i:Interaction.Triggers>
    										<i:EventTrigger EventName="Click">
    											<ei:GoToStateAction StateName="Black"/>
    										</i:EventTrigger>
    									</i:Interaction.Triggers>
    								</MenuItem>
    							</MenuItem>
    							<Separator />
    							<MenuItem Header="Tunnel">
    								<MenuItem Header="Spheres" IsCheckable="True" 
    									IsChecked="{Binding TunnelDisplayType, ConverterParameter=Spheres, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Spheres" />
    								<MenuItem Header="Centerline" IsCheckable="True" 
    									IsChecked="{Binding TunnelDisplayType, ConverterParameter=Centerline, Converter={StaticResource EnumToBool}, Mode=OneWay}"
    									Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="Centerline"/>
    							</MenuItem>
    							<Separator />
    							<MenuItem Header="HET Atoms" IsCheckable="True" IsChecked="{Binding ShowHetAtoms, Mode=TwoWay}" />
    							<MenuItem Header="Water Atoms" IsCheckable="True" IsChecked="{Binding ShowWaters, Mode=TwoWay}" ToolTip="Hides residues with name HOH, WAT and SOL." />
    						</MenuItem>
    						<MenuItem Header="Start Points">
    							<MenuItem Header="CAS" IsCheckable="True" ToolTip="Violet balls. Computed from CAS Database." 
									IsChecked="{Binding TunnelOriginVisual.ShowFromDatabase, Mode=TwoWay}" />
    							<MenuItem Header="From Selection" IsCheckable="True" ToolTip="Green balls. Computed from current selection." 
									IsChecked="{Binding TunnelOriginVisual.ShowFromSelection, Mode=TwoWay}" />
    							<MenuItem Header="Automatic" ToolTip="Blue balls. Automatically computed as 'deep' points in cavities.">
    								<MenuItem Header="Per Cavity" IsCheckable="True" ToolTip="Display for selected cavities only." 
										IsChecked="{Binding TunnelOriginVisual.ComputedOriginsDisplayType, ConverterParameter=PerCavity, Converter={StaticResource EnumToBool}, Mode=OneWay}"
										Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="OriginsPerCavity" />
    								<MenuItem Header="All" IsCheckable="True" ToolTip="Display all." 
										IsChecked="{Binding TunnelOriginVisual.ComputedOriginsDisplayType, ConverterParameter=All, Converter={StaticResource EnumToBool}, Mode=OneWay}"
										Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="OriginsAll"/>
									<MenuItem Header="None" IsCheckable="True" ToolTip="Display all." 
										IsChecked="{Binding TunnelOriginVisual.ComputedOriginsDisplayType, ConverterParameter=None, Converter={StaticResource EnumToBool}, Mode=OneWay}"
										Command="{Binding SetDisplayModeCommand, Mode=OneTime}"
    									CommandParameter="OriginsNone" />
    							</MenuItem>
    						</MenuItem>
    					</Menu>
    					<CheckBox Content="Surface" Margin="6, 0, 0, 0" VerticalAlignment="Center" IsChecked="{Binding ShowSurface, Mode=TwoWay}" ToolTip="Displays the molecular surface." />

                        <Rectangle Margin="8 4 0 4" Width="1" Fill="White" />
                        
                        <Button HorizontalAlignment="Right" Margin="8 0 8 0" Padding="0 0 0 0" VerticalAlignment="Center" Style="{DynamicResource HyperlinkButton}"
                                Command="{Binding ResetPanCommand, Mode=OneTime}" Content="Reset Pan" />
                        <CheckBox x:Name="clipCheck" IsChecked="{Binding IsClipped}" VerticalAlignment="Center" Content="Clipping Plane" ToolTip="Enable or disable the clipping plane. Use mouse wheel or the slider to change the offset."/>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center"
							Visibility="{Binding IsChecked, Converter={StaticResource boolVisibilityConverter}, ElementName=clipCheck, Mode=OneWay}">
                            <TextBlock Margin="6 0 0 0" Width="30" Text="{Binding Value, ElementName=clipSlider, StringFormat=0.0}" Grid.Column="1" VerticalAlignment="Center" TextAlignment="Right" />
                            <Slider Margin="6 0 0 0" x:Name="clipSlider" Grid.Column="2" Value="{Binding ClipOffset, Mode=TwoWay}" Minimum="-30" Maximum="30" VerticalAlignment="Center" Width="60" />
                        </StackPanel>
                    </StackPanel>
					
	    				<Button x:Name="button1" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 3 4 0" Style="{DynamicResource HyperlinkButton}" Content="Hide Controls">	    					
	    					<i:Interaction.Triggers>
	    						<i:EventTrigger EventName="Click">
	    							<ei:GoToStateAction StateName="HiddenTools"/>
	    						</i:EventTrigger>
	    					</i:Interaction.Triggers>	    					
	    				</Button>
					</Grid>
                <Button x:Name="button" Margin="0 3 4 2" VerticalAlignment="Top" HorizontalAlignment="Right" Style="{DynamicResource HyperlinkButton}" Visibility="Collapsed" Content="Show Controls">
					<i:Interaction.Triggers>
						<i:EventTrigger EventName="Click">
							<ei:GoToStateAction StateName="VisibleTools"/>
						</i:EventTrigger>
					</i:Interaction.Triggers></Button>
    			<TunnelControls:ResidueControl Margin="0" Grid.Row="1" Structure="{Binding Structure, Mode=OneWay}" 
                                               VerticalAlignment="Bottom" Background="#FF525252" />
                
                <TunnelControls:LogControl Grid.Row="2" Background="#FF323232" Height="35" />
    		</Grid>
    		<Grid x:Name="grid" Grid.Column="1">
    			<v:StructureControlView Grid.Row="1" Margin="0 -1 0 0" DataContext="{Binding Mode=OneWay}" Background="{StaticResource LightBrush}" Grid.Column="1" />
    		</Grid>
    	</Grid>
    </Grid>
</UserControl>
