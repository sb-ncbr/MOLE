/*
 * Copyright (c) 2016 David Sehnal, licensed under MIT license, See LICENSE file for more info.
 */

using WebChemistry.Tunnels.WPF.ViewModel;
using WebChemistry.Util.PyMol;
using WebChemistry.Tunnels.Core;
using System.Linq;
using System;
using System.Collections.Generic;
using WebChemistry.Framework.Math;

namespace WebChemistry.Tunnels.WPF.Util
{
    public static class PyMOLExporter
    {
        static List<WebChemistry.Util.PyMol.Utils.TunnelVertex> ToPyMOLProfile(TunnelProfile profile, Vector3D offset)
        {
            return profile.Select(n => new WebChemistry.Util.PyMol.Utils.TunnelVertex
            {
                X = n.Center.X + offset.X,
                Y = n.Center.Y + offset.Y,
                Z = n.Center.Z + offset.Z,
                Distance = n.Distance,
                Radius = n.Radius
            }).ToList();
        }

        static List<Tuple<string, string, string>> ToPyMOLLayers(IEnumerable<TunnelLayer> layers)
        {
            Func<TunnelLayer, int, string> rd = (l, i) =>
            {
                string ret = "";
                if (i < l.Lining.Count)
                {
                    var r = l.Lining[i];
                    ret = r.ToString();
                    if (l.BackboneLining.Contains(r) && !l.NonBackboneLining.Contains(r)) ret += " " + "Backbone";
                }
                return ret;
            };

            return layers.Select(l => Tuple.Create(rd(l, 0), rd(l, 1), rd(l, 2))).ToList();
        }

        static WebChemistry.Util.PyMol.Utils.Tunnel ToPyMOLTunnel(Tunnel tunnel, Vector3D offset)
        {
            return new WebChemistry.Util.PyMol.Utils.Tunnel
            {
                Layers = ToPyMOLLayers(tunnel.GetLiningLayers()),
                Vertices = ToPyMOLProfile(tunnel.GetProfile(6), offset)
            };
        }

        static WebChemistry.Util.PyMol.Utils.Cavity ToPyMOLCavity(Cavity cavity)
        {
            return null;
            //return new WebChemistry.Util.PyMol.Utils.Cavity
        }

        public static void Export(StructureViewModel s, string filename, IEnumerable<TunnelViewModel> tunnels, string type)
        {

            new PyMOLBuilder(new PyMOLScript("script") { Content = new WebChemistry.Util.PyMol.Tkinter.NullContainer() })
                    .ShowTunnels(tunnels.Select(t => ToPyMOLTunnel(t.Tunnel, s.GeometricalCenterOffset + s.ParentGeometricalCenterOffset)).ToList(), type)
                //.ShowCavities( //s.Complex.Cavities.Select(c => ToPyMOLCavity(c)).ToList())
                    .ShowPDB(s.Structure.Id)
                    .CompileAndSave(filename, new string[] { 
                    "# This file was generated by MOLE 2.0 (http://mole.chemi.muni.cz, http://mole.upol.cz - moleOnline, version " +  Complex.Version + ")",
                    "# Please cite the following reference when reporting the results using MOLE:",
                    "#",
                    "# Sehnal D., Svobodova Varekova R., Berka K., Pravda L., Navratilova V., Banas P., Ionescu C.-M., Geidl S., Otyepka M., Koca J.:",
                    "# MOLE 2.0: Advanced Approach for Analysis of Biomacromolecular Channels. Journal of Cheminformatics 2013, 5:39. doi:10.1186/1758-2946-5-39",
                    "#",
                    "# and",
                    "#",
                    "# Berka, K; Hanak, O; Sehnal, D; Banas, P; Navratilova, V; Jaiswal, D; Ionescu, C-M; Svobodova Varekova, R; Koca, J; Otyepka M:",
                    "# MOLEonline 2.0: Interactive Web-based Analysis of Biomacromolecular Channels. Nucleic Acid Research 2012, doi:10.1093/nar/GKS363",
                    "#" });

            //if (isPores)
            //{
            //    new PyMOLBuilder(new PyMOLScript("script") { Content = new WebChemistry.Util.PyMol.Tkinter.NullContainer() })
            //        .ShowTunnels(s.Pores.Select(t => ToPyMOLTunnel(t.Tunnel, s.GeometricalCenterOffset + s.ParentGeometricalCenterOffset)).ToList(), "Pore")
            //        //.ShowCavities( //s.Complex.Cavities.Select(c => ToPyMOLCavity(c)).ToList())
            //        .ShowPDB(s.Structure.Id)
            //        .CompileAndSave(filename, new string[] { 
            //        "# This file was generated by MOLEOnline (http://mole.upol.cz, version " +  Complex.Version + ")",
            //        "# Please cite the following reference when reporting the results using MOLE:",
            //        "#",
            //        "#   Hanak O., Sehnal D., Berka K., Banas P., Svobodova-Varekova R., Navratilova V., Koca J. and Otyepka M.: MoleOnline, article in preparation",
            //        "#" });
            //}
            //else
            //{
            //    new PyMOLBuilder(new PyMOLScript("script") { Content = new WebChemistry.Util.PyMol.Tkinter.NullContainer() })
            //       .ShowTunnels(s.Tunnels.Select(t => ToPyMOLTunnel(t.Tunnel, s.GeometricalCenterOffset + s.ParentGeometricalCenterOffset)).ToList())
            //            //.ShowCavities( //s.Complex.Cavities.Select(c => ToPyMOLCavity(c)).ToList())
            //       .ShowPDB(s.Structure.Id)
            //       .CompileAndSave(filename, new string[] { 
            //            "# This file was generated by MOLEOnline (http://mole.upol.cz, version " +  Complex.Version + ")",
            //            "# Please cite the following reference when reporting the results using MOLE:",
            //            "#",
            //            "#   Hanak O., Sehnal D., Berka K., Banas P., Svobodova-Varekova R., Navratilova V., Koca J. and Otyepka M.: MoleOnline, article in preparation",
            //            "#" });
            //}
        }
    }
}